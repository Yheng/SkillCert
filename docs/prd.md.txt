Product Requirements Document (PRD): SkillCert
Product Name: SkillCert

Date: August 9, 2025

Author: PM Agent, via BMad Orchestrator

Version: 1.0

Reference: docs/project-brief.md, SkillCert_PRD.markdown
1. Product Overview

Purpose: SkillCert is a decentralized web app enabling freelancers to earn blockchain-verified micro-credentials (e.g., “React Basics”) to prove expertise in the $400B gig economy. It uses a local Ethereum blockchain (Hardhat), IPFS for task proofs, and SQLite for user profiles. The app features a futuristic UI with glassmorphism, neumorphism, micro-interactions, 3D elements, and aurora gradients, designed for a 2025 portfolio to showcase React, Web3, and modern UI/UX trends.
Target Audience:

Freelancers: Earn and share credentials to boost hireability by 30% (Upwork, 2025).
Educators: Issue credentials via tasks and smart contracts.
Employers: Verify credentials instantly via blockchain.
Tech Recruiters: Evaluate portfolio showcasing modern tech stack and UI trends.


Value Proposition: Addresses the 60% hiring barrier for freelancers due to unverified skills (LinkedIn, 2025) with tamper-proof, globally verifiable credentials and an engaging UI for portfolio appeal.
Portfolio Goal: Demonstrate expertise in React, Vite, Tailwind CSS, Web3 (Solidity, ethers.js, IPFS), and UI trends (glassmorphism, neumorphism) for 2025 tech roles.

2. Problem Statement

Problem: 60% of freelancers face hiring barriers due to unverified skills, costing the $400B gig economy $50B annually (LinkedIn, 2025). Traditional certificates are costly, forgeable, and lack scalable verification.
Impact:

Freelancers struggle to prove expertise, limiting opportunities.
Employers face risks hiring unverified talent.
Educators lack efficient, secure credentialing tools.


Solution: SkillCert leverages a local Ethereum blockchain for tamper-proof credentials, IPFS for secure task proof storage, and SQLite for user profiles, with a visually stunning UI to enhance engagement and portfolio appeal.

3. Key Features
3.1 User Roles

Freelancers: Submit tasks, earn credentials, view progress, share verified credentials (QR codes).
Educators: Create tasks, approve submissions, issue credentials via smart contracts.
Employers: Verify credentials on blockchain, review IPFS proofs.
Admins: Manage users, tasks, and blockchain settings via SQLite CRUD.

3.2 Core Features

Task Submission:

Description: Freelancers submit tasks (e.g., code projects) via a glassmorphic form (React Hook Form, shadcn/ui <Form>, bg-dark-gray/30 backdrop-blur-md). Files are uploaded to IPFS (ipfs-http-client) and linked to smart contracts (Solidity, Hardhat).
UI: Glassmorphic form with aurora gradient focus (focus:ring-gradient-to-r from-teal-500 to-blue-500).
Animation: Micro-interaction on input (Framer Motion, ring-offset-2), confetti on submission (React-Confetti), 3D file icon spin (React-Spring).
Notification: “Task uploaded!” (React-Toastify, bg-gradient-to-r from-teal-500 to-blue-500).


Credential Issuance:

Description: Educators approve tasks, issuing micro-credentials on blockchain. Freelancers receive a 3D badge (shadcn/ui <Card>, Three.js, bg-dark-gray/20 backdrop-blur-sm).
UI: Glassmorphic card with aurora gradient accent (border-l-4 border-gradient-to-b from-blue-500 to-teal-500).
Animation: Bouncy badge reveal (React-Spring), micro-interaction on hover (Framer Motion).
Notification: “Credential earned!” (React-Toastify, bg-green-500).


Credential Verification:

Description: Employers query credentials via blockchain (ethers.js) in a glassmorphic table (shadcn/ui <Table>, bg-dark-gray/20 backdrop-blur-sm). IPFS proofs are accessible (React-Icons: <FaFile />, text-teal-500).
UI: Glassmorphic table with neumorphic icons (shadow-neumorphic).
Animation: Table row slide-in (Framer Motion), 3D checkmark spin (React-Spring).
Notification: “Credential verified!” (React-Toastify, aurora gradient).


Progress Tracking:

Description: Visualize skill progress with ApexCharts line charts (aurora gradient fill: fill: linear-gradient(#2DD4BF, #3B82F6)).
UI: Glassmorphic card (bg-dark-gray/20 backdrop-blur-sm).
Animation: Chart fade-in (Framer Motion), tooltip pulse on hover.


User Profiles:

Description: Manage profiles via neumorphic forms (React Hook Form, shadcn/ui <Form>, shadow-neumorphic), stored in SQLite.
Animation: Form save button scale (React-Spring), micro-interaction on input focus.


Settings:

Description: Configure preferences (e.g., skill categories) via glassmorphic forms (bg-dark-gray/30 backdrop-blur-md).
Animation: Neumorphic toggle switch transition (React-Spring), micro-interaction on toggle.


Landing Page:

Description: Hero section with 3D blockchain nodes (Three.js, React-Spring), glassmorphic background (bg-dark-gray/30 backdrop-blur-md), and aurora gradients (bg-gradient-to-br from-blue-500 to-teal-500).
UI: Neumorphic CTAs (shadcn/ui <Button>, shadow-neumorphic), sign-up form (React Hook Form), confetti on submit (React-Confetti).
Notification: “Explore SkillCert!” (React-Toastify, aurora gradient).



4. Technical Requirements
4.1 Tech Stack

Frontend:

React, Vite (~500 KB bundle).
Tailwind CSS: Dark theme (Dark Gray #1F2A44, Blue #3B82F6, Teal #2DD4BF, Green #10B981, Light Gray #D1D5DB) with glassmorphism (backdrop-blur-md) and neumorphism (shadow-neumorphic).
shadcn/ui: Cards, forms, buttons, tables.
Framer Motion: Fade-ins, micro-interactions (e.g., ripple effects).
React-Spring: 3D badge spins, aurora gradient transitions.
ApexCharts: Charts with aurora gradients.
React-Toastify: Notifications with aurora gradients.
React-Icons: Blockchain icons (e.g., <FaEthereum />).
React Hook Form: Form management.
React-Confetti: Celebratory effects.
Three.js: 3D badges, blockchain nodes.


Backend:

Node.js/Express: REST API for SQLite and IPFS.
SQLite: Local storage for profiles, metadata (encrypted).


Blockchain:

Hardhat: Local Ethereum node.
ethers.js: Blockchain interactions.
Solidity: Smart contracts for credential issuance/verification.
IPFS: Task proof storage (ipfs-http-client).


AI (Optional):

Transformers.js: Local skill suggestions.
OpenAI API: Fallback for AI features (replaceable with local logic).


Deployment: Local on localhost (Vite: npm run dev, Hardhat: npx hardhat node, Node.js: node server.js).

4.2 Non-Functional Requirements

Performance: Page load <1s, blockchain queries <2s, SQLite queries <100ms.
Security: JWT authentication, bcrypt hashing, SQLite encryption, smart contract audits.
Accessibility: WCAG 2.1 via shadcn/ui, ARIA labels.
Scalability: Handle 1,000 users, 10,000 credentials locally.
UI/UX: Glassmorphism, neumorphism, micro-interactions, 3D elements, aurora gradients for a futuristic interface.

5. User Flows
5.1 Freelancer Flow

Sign up via glassmorphic form (React Hook Form, micro-interaction on input).
Submit tasks to IPFS (glassmorphic form, micro-interaction on upload).
Receive 3D credential badge (blockchain, React-Spring, confetti).
View progress on dashboard (ApexCharts, aurora gradient).
Share credentials (QR code, ethers.js).

5.2 Educator Flow

Create tasks (glassmorphic form, micro-interaction).
Approve submissions (ethers.js, IPFS proof review).
Issue credentials (blockchain, React-Toastify).

5.3 Employer Flow

Verify credentials (glassmorphic table, micro-interaction on row hover).
View IPFS proofs (React-Icons).
Receive verification confirmation (React-Toastify, confetti).

5.4 Admin Flow

Manage users/tasks (SQLite CRUD, neumorphic table).
Configure blockchain (Hardhat).

6. Design System
6.1 Color Palette

Dark Gray (#1F2A44): Background.
Blue (#3B82F6): Primary accents.
Teal (#2DD4BF): Secondary accents.
Green (#10B981): Success states.
Light Gray (#D1D5DB): Text, borders.
Aurora Gradient: bg-gradient-to-br from-blue-500 via-teal-500 to-purple-500.

6.2 Typography

Font: Inter (fallback: Roboto).
Hierarchy:

Headings: Inter Bold (font-bold text-4xl text-blue-500).
Body: Inter Regular (text-base text-gray-200).
Accents: Inter Medium (text-sm text-teal-500).



6.3 Design Trends

Glassmorphism: Translucent elements (bg-dark-gray/30 backdrop-blur-md) for cards, forms, tables.
Neumorphism: Tactile buttons, toggles (shadow-neumorphic).
Micro-Interactions: Ripple effects, progress animations (Framer Motion, React-Spring).
3D Elements: Rotating badges, blockchain nodes (Three.js, React-Spring).
Aurora Gradients: Vibrant backgrounds, hover states.

6.4 Animations

Framer Motion: Fade-ins, micro-interactions (e.g., scale: 1 to 1.05).
React-Spring: 3D spins, bouncy reveals.
React-Confetti: Celebratory effects.
React-Toastify: Slide-in notifications with aurora gradients.

6.5 Components

shadcn/ui: Glassmorphic cards, forms, tables; neumorphic buttons.
React-Icons: <FaEthereum />, <MdBadge />.
ApexCharts: Aurora gradient charts.
Three.js: 3D badges, nodes.

7. Success Metrics

Engagement: 80% demo users complete a task.
Performance: Page load <1s, blockchain queries <2s.
Portfolio: Screencasts of glassmorphic UI, 3D badges, aurora gradients on GitHub/LinkedIn.
Market Fit: Address 60% freelancer hiring barrier.

8. Risks and Mitigations

Risk: Complex UI slows performance.

Mitigation: Optimize animations (limit blur, 3D complexity), use Vite for fast builds.


Risk: Blockchain learning curve.

Mitigation: Use Hardhat tutorials, start with simple contracts.


Risk: SQLite scalability.

Mitigation: Index tables, consider React Query for caching.